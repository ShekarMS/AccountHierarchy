public class HierarchyStructure {

    //Declare variables
    public String currentId{set;get;}
    public String sObjectType{set;get;}
    public String sObjectFields{set;get;}
    public String parentIdField{set;get;}
    public Integer noOfLevels{set;get;}
    public List<ObjectStructureMap> asm ;
    public Map<String, ObjectStructureMap> masm;
    public List<Integer> maxLevel;
    /**
    * Contructor
    */
    public HierarchyStructure() {
    	this.asm = new List<ObjectStructureMap>{};
    	this.masm = new Map<String, ObjectStructureMap>{};
    	this.maxLevel = new List<Integer>{};
        system.debug('currentId: '+currentId);
        system.debug('sObjectType: '+sObjectType);
        system.debug('sObjectFields: '+sObjectFields);
        system.debug('parentIdField: '+parentIdField);
        if(sObjectFields == null || sObjectFields == ''){
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Please Add the field API Names to be displayed on Page'));
        }                   
    }
    
    /**
    * Allow page to set the current ID
    */
    public void setcurrentId( String cid ){
        currentId = cid;
    }
    /**
    * Allow page to set the sObjectType
    */
    public void setsObjectType( String sObjectType ){
        sObjectType = sObjectType;
    }   
    /**
    * Allow page to set the sObjectFields
    */
    public void setsObjectFields( String sObjectFields ){
        sObjectFields = sObjectFields;
    }    
    /**
    * Allow page to set the parentIdField
    */
    public void setparentIdField( String parentIdField ){
        parentIdField = parentIdField;
    }      
    /**
    * Allow page to set the current ID
    */
    public void setnoOfLevels( String noOfLevels ){
        noOfLevels = noOfLevels;
    }
       
    public List<String> getfieldAPINames(){
        List<String> apiList = sObjectFields.split(',');
        if(apiList == null || apiList.size() == 0){
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.ERROR,'Please Add the field API Names to be displayed on Page'));
        } 
        Set<String> fieldAPINames = new Set<String>();
        fieldAPINames.addAll(apiList);
        fieldAPINames.remove('Id');
        fieldAPINames.remove('Name');
        apiList.clear();
        apiList.addAll(fieldAPINames);
        return apiList;
    }    
    /**
    * Return ObjectStructureMap to page
    * @return asm
    */
    public List<ObjectStructureMap> getObjectStructure(){
        asm.clear();
        if ( currentId == null ) {
            currentId = System.currentPageReference().getParameters().get( 'id' );
        }
        
        System.assertNotEquals( currentId, null, 'sObject ID must be provided' );
        asm = formatObjectStructure( CurrentId );
        
        return asm;
    }

    /**
    * Query SObject from top down to build the ObjectStructureMap
    * @param currentId
    * @return asm
    */
    public ObjectStructureMap[] formatObjectStructure( String currentId ){
    
        List<ObjectStructureMap> asm = new List<ObjectStructureMap>{};
        masm.clear();

        //Change below
        List<SObject> allRecs           = new List<SObject>{};
        List<ID> currentParent      = new List<ID>{};
        Map<ID, String> nodeList    = new Map<ID, String>{};
        List<String> nodeSortList   = new List<String>{};
        List<Boolean> levelFlag     = new List<Boolean>{};
        List<Boolean> closeFlag     = new List<Boolean>{};
        String nodeId               = '0';
        String nodeType             = 'child';
        Integer count               = 0;
        Integer level               = 0;
        Boolean endOfStructure      = false;
        
        //Find highest level obejct in the structure
        currentParent.add( GetTopElement( currentId ) );
		String soql = 'select Id,Name,' + parentIdField + ',' + sObjectFields + ' from ' + sObjectType;  
        system.debug('soql :'+soql);
        Integer levelCount = 0;
        //Loop though all children
        while ( !endOfStructure ){

            if( level == 0 ){
                //Change below     
                allRecs =  Database.query( soql + ' WHERE id IN : CurrentParent'); //'Order by name'
            } 
            else {
                //Change below      
                allRecs = Database.query( soql +' WHERE ' + parentIdField  +' IN : CurrentParent ');
            }

            if( allRecs.size() == 0 ||  levelCount >= noOfLevels){
                endOfStructure = true;
            }
            else{
                currentParent.clear();
                for ( Integer i = 0 ; i < allRecs.size(); i++ ){
                    //Change below
                    SObject a = allRecs[i];
                    nodeId = ( level > 0 ) ? NodeList.get( (Id)a.get(parentIdField) )+'.'+String.valueOf( i ) : String.valueOf( i );
                    masm.put( NodeID, new ObjectStructureMap( nodeID, levelFlag, closeFlag, nodeType, false, false, a ) );
                    currentParent.add( (Id)a.get('Id') );
                    nodeList.put( a.id,nodeId );
                    nodeSortList.add( nodeId );
                }
                
                maxLevel.add( level );                
                level++;
            }
            levelCount++;
        }
        
        //SObject structure must now be formatted
        NodeSortList.sort();
        for( Integer i = 0; i < NodeSortList.size(); i++ ){
            List<String> pnl = new List<String> {};
            List<String> cnl = new List<String> {};
            List<String> nnl = new List<String> {};
            
            if ( i > 0 ){
                String pn 	= NodeSortList[i-1];
                pnl 		= pn.split( '\\.', -1 );
            }

            String cn 	= NodeSortList[i];
            cnl 		= cn.split( '\\.', -1 );

            if( i < NodeSortList.size()-1 ){
                String nn = NodeSortList[i+1];
                nnl = nn.split( '\\.', -1 );
            }
            
            ObjectStructureMap tasm = masm.get( cn );
            if ( cnl.size() < nnl.size() ){
                //Parent
                tasm.nodeType = ( isLastNode( cnl ) ) ? 'parent_end' : 'parent';
            }
            else if( cnl.size() > nnl.size() ){
                tasm.nodeType 	= 'child_end';
                tasm.closeFlag 	= setcloseFlag( cnl, nnl, tasm.nodeType );
            }
            else{
                tasm.nodeType = 'child';
            }
            
            tasm.levelFlag = setlevelFlag( cnl, tasm.nodeType ); 
            
            //Change below
            if ( (Id)tasm.sobj.get('Id') == currentId ) {
                tasm.currentNode = true;
            }
            asm.add( tasm );
        }
        
        asm[0].nodeType 			= 'start';
        asm[asm.size()-1].nodeType 	= 'end';
        
        return asm;
    }
    
    /**
    * Determin parent elements relationship to current element
    * @return flagList
    */
    public List<Boolean> setlevelFlag( List<String> nodeElements, String nodeType ){
    	
        List<Boolean> flagList = new List<Boolean>{};
        String searchNode 	= '';
        String workNode 	= '';
        Integer cn 			= 0;
        
        for( Integer i = 0; i < nodeElements.size() - 1; i++ ){
            cn = Integer.valueOf( nodeElements[i] );
            cn++;
            searchNode 	= workNode + String.valueOf( cn );
            workNode 	= workNode + nodeElements[i] + '.';
            if ( masm.containsKey( searchNode ) ){
                flagList.add( true );
            }
            else {
                flagList.add( false );
            }
        }
        
        return flagList;
    }
    
    /**
    * Determin if the element is a closing element
    * @return flagList
    */
    public List<Boolean> setcloseFlag( List<String> cnl, List<String> nnl, String nodeType ){
    	
        List<Boolean> flagList = new List<Boolean>{};
        String searchNode 	= '';
        String workNode 	= '';
        Integer cn 			= 0;
        
        for( Integer i = nnl.size(); i < cnl.size(); i++ ){
        	flagList.add( true );
        }
        
        return flagList;
    }
    
    /**
    * Determin if Element is the bottom node  
    * @return Boolean
    */
    public Boolean isLastNode( List<String> nodeElements ){
    	
        String searchNode 	= '';
        Integer cn 			= 0;
        
        for( Integer i = 0; i < nodeElements.size(); i++ ){
            if ( i == nodeElements.size()-1 ){
                cn = Integer.valueOf( nodeElements[i] );
                cn++;
                searchNode = searchNode + String.valueOf( cn );
            }
            else {
                searchNode = searchNode + nodeElements[i] + '.';
            }
        }
        if ( masm.containsKey( searchNode ) ){
            return false;
        }
        else{
            return true;
        }
    }
    
    /**
    * Find the tom most element in Heirarchy  
    * @return objId
    */
    public String GetTopElement( String objId ){
    	
        Boolean top = false;
        while ( !top ) {
            //Change below
            SObject a = DataBase.query('Select Id,' +parentIdField +' From ' +sObjectType + ' where Id =: objId limit 1');            
            if ( a.get(parentIdField) != null ) {
                objId = (Id)a.get(parentIdField);
            }
            else {
                top = true;
            }
        }
        return objId ;
    }
    
	/**
    * Wrapper class
    */
    public with sharing class ObjectStructureMap{

        public String nodeId;
        public Boolean[] levelFlag = new Boolean[]{};
        public Boolean[] closeFlag = new Boolean[]{};
        public String nodeType;
        public Boolean currentNode;
        
        /**
        * @Change this to your sObject
        */
        public SObject sobj;
        
        public String getnodeId() { return nodeId; }
        public Boolean[] getlevelFlag() { return levelFlag; }
        public Boolean[] getcloseFlag() { return closeFlag; }
        public String getnodeType() { return nodeType; }
        public Boolean getcurrentNode() { return currentNode; }


        /**
        * @Change this to your sObject
        */
        public SObject getsobj() { return sobj; }
        
        public void setnodeId( String n ) { this.nodeId = n; }
        public void setlevelFlag( Boolean l ) { this.levelFlag.add(l); }
        public void setlcloseFlag( Boolean l ) { this.closeFlag.add(l); }
        public void setnodeType( String nt ) { this.nodeType = nt; }
        public void setcurrentNode( Boolean cn ) { this.currentNode = cn; }

        /**
        * @Change this to your sObject
        */
        public void setsobj( SObject a ) { this.sobj = a; }

        /**
        * @Change the parameters to your sObject
        */
        public ObjectStructureMap( String nodeId, Boolean[] levelFlag,Boolean[] closeFlag , String nodeType, Boolean lastNode, Boolean currentNode, SObject a ){
            
            this.nodeId         = nodeId;
            this.levelFlag      = levelFlag; 
            this.closeFlag      = closeFlag;
            this.nodeType       = nodeType;
            this.currentNode    = currentNode;

            //Change this to your sObject  
            this.sobj = a;
        }
    }
}